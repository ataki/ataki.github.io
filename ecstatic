#!/usr/bin/env ruby

require "optparse"
require 'fileutils'
require 'date'

module Ecstatic
  class Conductor
    # Public: Conductor helps manage Jekyll
    #   using easy commands to help the drafting
    #   and editing process. Combined with vim,
    #   it makes for a decent editing experience.
    def initialize(args)
      cmd = args[0].to_s
      if Ecstatic::Conductor.method_defined?(cmd)
        self.send(cmd, args[1..-1])
      else
        raise "command `#{cmd}` does not exist"
      end
    end

    # Public: Publishes articles from the "_drafts"
    #   folder. If arguments are specified, only publishes
    #   posts with specified name. If none is given, publishes
    #   all posts in the _drafts folder.
    def publish(args)
      if args.length == 0
        Dir.foreach('_drafts') do |filename|
          FileUtils.mv "_drafts/#{filename}", "_posts/#{filename}", :force => true
        end
      else
        args.each do |name|
          Dir.foreach('_drafts') do |filename|
            puts filename, name, filename.include?(name)
            if filename.include? name
              FileUtils.mv "_drafts/#{filename}", "_posts/#{filename}", :force => true
            end
          end
        end
      end
    end

    # Public: Keeps the most recent K articles in "_posts",
    #   and moves the rest to the "_archive" folder
    def keep_most_recent
      FileUtils.mkdir_p "_archive"
      posts = Dir.foreach('_posts').sort { |a, b| b <=> a }
      posts[10..-1].each do |filename|
        FileUtils.mv "_posts/#{filename}", "_archive/#{filename}", :force => true
      end
    end

    # Public: Creates draft
    def start(args)
      post_name = args[0]
      dmy = DateTime.now.strftime("%Y-%m-%d")
      full_name = "_drafts/#{dmy}-#{post_name}.textile"
      FileUtils.touch full_name
      File.open(full_name, 'a') do |f|
        f << """
---
layout: post
title: #{post_name}
---
        """.strip
      end
      puts "Created #{full_name}"
    end
  end
end

begin
  Ecstatic::Conductor.new ARGV
rescue Exception => err
  puts "usage: ecstatic [command] ..."
  puts "possible commands"
  puts "  publish: Publishes all drafts"
  puts "  publish [post]: Publishes all drafts matching given name\n"
  abort "#{err.message}\n"
end